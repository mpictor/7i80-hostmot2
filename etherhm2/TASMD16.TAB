/* This is the instruction set definition table 
/* for the D16 version of TASM.
/* 
/* Gilbert Eldredge, Mesa Electronics, January 2009.
/* 
/* 4 index registers 
/* 24 bit instructions 
/* oooo iXYx jjjx aaaa aaaa aaaa aaaa 
/*--------------------------------------------------------------*/
.MSFIRST
/*.LONGADDRS
.WORDADDRS

/*INSTR	ARGS	OPCODE		BYTES	MOD	CLASS 	SHIFT 	OR */

/* 0000 oooo kkkk kkkk kkkk kkkk
/*IMMEDIATE WORD OPERAND 
LWI	*	00010000	4	T1	1	0	00FFFF	/*load ext word immediate

/* 0000 0ooo oooo xxxx xxxx xxxx
/*NO OPERAND
NOP	""	00000000	4	NOP	1	0	0	/*nop
RCL	""	00040000	4	NOP	1	0	0	/*rotate with carry left
RCR	""	00050000	4	NOP	1	0	0	/*rotate with carry right
BSWP	""	00060000	4	NOP	1	0	0	/*word swap
SXB	""	00070000	4	NOP	1	0	0	/*sign extend 16 bit value
LDPH	""	00080000	4	NOP	1	0	0	/*load product high
ASHR	""	000B0000	4	NOP	1	0	0	/*arithmetic shift right (bit 0 => carry)

/* 0000 1ooo oooo xxxx xxxx xxxx
/*INDEX OPERATE
LDA	X	00800000	4	NOP	1	0	0	/*load acc from indirect reg x
LDA	Y	00810000	4	NOP	1	0	0	/*load acc from indirect reg y
LDA	Z	00820000	4	NOP	1	0	0	/*load acc from indirect reg z
LDA	T	00830000	4	NOP	1	0	0	/*load acc from indirect reg t
STA	X	00840000	4	NOP	1	0	0	/*store acc to indirect reg x
STA	Y	00850000	4	NOP	1	0	0	/*store acc to indirect reg y
STA	Z	00860000	4	NOP	1	0	0	/*store acc to indirect reg z
STA	T	00870000	4	NOP	1	0	0	/*store acc to indirect reg t

POP	 ""	008C0000	4	NOP	1	0	0	/* pop stack to acc
PUSH	 ""	008D0000	4	NOP	1	0	0	/* push acc on stack
LDSP	 ""	008E0000	4	NOP	1	0	0	/* acc < SP
STSP	 ""	008F0000	4	NOP	1	0	0	/* acc > SP 

/* 1000 1000 0000 nnnn nnnn nnnn
ADDIX	*	00880000	4	T1	1	0	000FFF	/*add immediate to indirect reg x
ADDIY	*	00890000	4	T1	1	0	000FFF	/*add immediate to indirect reg y
ADDIZ	*	008A0000	4	T1	1	0	000FFF	/*add immediate to indirect reg z
ADDIT	*	008B0000	4	T1	1	0	000FFF	/*add immediate to indirect reg t

/*12 BIT OPERAND, PROGRAM ADDRESS FOR JUMPS

/* 0010 1xxx xxxx nnnn nnnn nnnn
RET	*	00280000	4	T1	1	0	000000	/* jmp indirect R

/* 0010 0xxx xxxx nnnn nnnn nnnn
RJMP	*	00200000	4	T1	1	0	000FFF	/* jmp

/* 0001 0xxx xxxx nnnn nnnn nnnn 
RJSR	*	00100000	4	T1	1	0	000FFF  /* jmp and save return


/* 0011 Cc Zz Ss Oo nnnn nnnn nnnn
RJMPC	*	00380000	4	T1	1	0	000FFF
RJMPNC	*	003C0000	4	T1	1	0	000FFF
RJMPZ	*	00320000	4	T1	1	0	000FFF
RJMPNZ	*	00330000	4	T1	1	0	000FFF
RJMPN	*	00308000	4	T1	1	0	000FFF
RJMPP	*	0030C000	4	T1	1	0	000FFF
RJMPO	*	00302000	4	T1	1	0	000FFF
RJMPNO	*	00303000	4	T1	1	0	000FFF

/* AFTER SUBTRACT 
RJMPA	*	003B0000	4	T1	1	0	000FFF
RJMPAE	*	00380000	4	T1	1	0	000FFF
RJMPBE	*	00382000	4	T1	1	0	000FFF
RJMPB	*	003C0000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDA	@X	00480000	4	NOP	1	0	0
OR	@X	00580000	4	NOP	1	0	0
XOR	@X	00680000	4	NOP	1	0	0
AND	@X	00780000	4	NOP	1	0	0
MULSU	@X	00980000	4	NOP	1	0	0 /* ACCL * operandL
MULSS	@X	00A80000	4	NOP	1	0	0
STA	@X	00B80000	4	NOP	1	0	0
ADD	@X	00C80000	4	NOP	1	0	0
ADDC	@X	00D80000	4	NOP	1	0	0
SUB	@X	00E80000	4	NOP	1	0	0
SUBC	@X	00F80000	4	NOP	1	0	0

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDA	@X,*	00480000	4	T1	1	0	000FFF
OR	@X,*	00580000	4	T1	1	0	000FFF
XOR	@X,*	00680000	4	T1	1	0	000FFF
AND	@X,*	00780000	4	T1	1	0	000FFF
MULSU	@X,*	00980000	4	T1	1	0	000FFF
MULSS	@X,*	00A80000	4	T1	1	0	000FFF
STA	@X,*	00B80000	4	T1	1	0	000FFF
ADD	@X,*	00C80000	4	T1	1	0	000FFF
ADDC	@X,*	00D80000	4	T1	1	0	000FFF
SUB	@X,*	00E80000	4	T1	1	0	000FFF
SUBC	@X,*	00F80000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDA	@Y	00490000	4	NOP	1	0	000000
OR	@Y	00590000	4	NOP	1	0	000000
XOR	@Y	00690000	4	NOP	1	0	000000
AND	@Y	00790000	4	NOP	1	0	000000
MULSU	@Y	00990000	4	NOP	1	0	000000 /* ACCL * operandL
MULSS	@Y	00A90000	4	NOP	1	0	000000
STA	@Y	00B90000	4	NOP	1	0	000000
ADD	@Y	00C90000	4	NOP	1	0	000000
ADDC	@Y	00D90000	4	NOP	1	0	000000
SUB	@Y	00E90000	4	NOP	1	0	000000
SUBC	@Y	00F90000	4	NOP	1	0	000000

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDA	@Y,*	00490000	4	T1	1	0	000FFF
OR	@Y,*	00590000	4	T1	1	0	000FFF
XOR	@Y,*	00690000	4	T1	1	0	000FFF
AND	@Y,*	00790000	4	T1	1	0	000FFF
MULSU	@Y,*	00990000	4	T1	1	0	000FFF
MULSS	@Y,*	00A90000	4	T1	1	0	000FFF
STA	@Y,*	00B90000	4	T1	1	0	000FFF
ADD	@Y,*	00C90000	4	T1	1	0	000FFF
ADDC	@Y,*	00D90000	4	T1	1	0	000FFF
SUB	@Y,*	00E90000	4	T1	1	0	000FFF
SUBC	@Y,*	00F90000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDA	@Z	004A0000	4	NOP	1	0	0
OR	@Z	005A0000	4	NOP	1	0	0
XOR	@Z	006A0000	4	NOP	1	0	0
AND	@Z	007A0000	4	NOP	1	0	0
MULSU	@Z	009A0000	4	NOP	1	0	0 /* ACCL * operandL
MULSS	@Z	00AA0000	4	NOP	1	0	0
STA	@Z	00BA0000	4	NOP	1	0	0
ADD	@Z	00CA0000	4	NOP	1	0	0
ADDC	@Z	00DA0000	4	NOP	1	0	0
SUB	@Z	00EA0000	4	NOP	1	0	0
SUBC	@Z	00FA0000	4	NOP	1	0	0

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDA	@Z,*	004A0000	4	T1	1	0	000FFF
OR	@Z,*	005A0000	4	T1	1	0	000FFF
XOR	@Z,*	006A0000	4	T1	1	0	000FFF
AND	@Z,*	007A0000	4	T1	1	0	000FFF
MULSU	@Z,*	009A0000	4	T1	1	0	000FFF
MULSS	@Z,*	00AA0000	4	T1	1	0	000FFF
STA	@Z,*	00BA0000	4	T1	1	0	000FFF
ADD	@Z,*	00CA0000	4	T1	1	0	000FFF
ADDC	@Z,*	00DA0000	4	T1	1	0	000FFF
SUB	@Z,*	00EA0000	4	T1	1	0	000FFF
SUBC	@Z,*	00FA0000	4	T1	1	0	000FFF
/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDA	@T	004B0000	4	NOP	1	0	000000
OR	@T	005B0000	4	NOP	1	0	000000
XOR	@T	006B0000	4	NOP	1	0	000000
AND	@T	007B0000	4	NOP	1	0	000000
MULSU	@T	009B0000	4	NOP	1	0	000000 /* ACCL * operandL
MULSS	@T	00AB0000	4	NOP	1	0	000000
STA	@T	00BB0000	4	NOP	1	0	000000
ADD	@T	00CB0000	4	NOP	1	0	000000
ADDC	@T	00DB0000	4	NOP	1	0	000000
SUB	@T	00EB0000	4	NOP	1	0	000000
SUBC	@T	00FB0000	4	NOP	1	0	000000

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDA	@T,*	004B0000	4	T1	1	0	000FFF
OR	@T,*	005B0000	4	T1	1	0	000FFF
XOR	@T,*	006B0000	4	T1	1	0	000FFF
AND	@T,*	007B0000	4	T1	1	0	000FFF
MULSU	@T,*	009B0000	4	T1	1	0	000FFF
MULSS	@T,*	00AB0000	4	T1	1	0	000FFF
STA	@T,*	00BB0000	4	T1	1	0	000FFF
ADD	@T,*	00CB0000	4	T1	1	0	000FFF
ADDC	@T,*	00DB0000	4	T1	1	0	000FFF
SUB	@T,*	00EB0000	4	T1	1	0	000FFF
SUBC	@T,*	00FB0000	4	T1	1	0	000FFF

/*12 BIT OPERAND, MEMORY REF INST
/* oooo 0xxx xxxx nnnn nnnn nnnn DIRECT INSTRUCTIONS
LDA	*	00400000	4	T1	1	0	000FFF	/*load acc from operand
OR	*	00500000	4	T1	1	0	000FFF
XOR	*	00600000	4	T1	1	0	000FFF
AND	*	00700000	4	T1	1	0	000FFF
MULSU	*	00900000	4	T1	1	0	000FFF	/*lo signed acc * operand >> acc
MULSS	*	00A00000	4	T1	1	0	000FFF
STA	*	00B00000	4	T1	1	0	000FFF	/*store acc to operand
ADD	*	00C00000	4	T1	1	0	000FFF
ADDC	*	00D00000	4	T1	1	0	000FFF
SUB	*	00E00000	4	T1	1	0	000FFF
SUBC	*	00F00000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDATO	@X	00488000	4	NOP	1	0	0
ORTO	@X	00588000	4	NOP	1	0	0
XORTO	@X	00688000	4	NOP	1	0	0
ANDTO	@X	00788000	4	NOP	1	0	0
ADDTO	@X	00C88000	4	NOP	1	0	0
ADDCTO	@X	00D88000	4	NOP	1	0	0
SUBTO	@X	00E88000	4	NOP	1	0	0
SUBCTO	@X	00F88000	4	NOP	1	0	0

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDATO	@X,*	00488000	4	T1	1	0	000FFF
ORTO	@X,*	00588000	4	T1	1	0	000FFF
XORTO	@X,*	00688000	4	T1	1	0	000FFF
ANDTO	@X,*	00788000	4	T1	1	0	000FFF
ADDTO	@X,*	00C88000	4	T1	1	0	000FFF
ADDCTO	@X,*	00D88000	4	T1	1	0	000FFF
SUBTO	@X,*	00E88000	4	T1	1	0	000FFF
SUBCTO	@X,*	00F88000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDATO	@Y	00498000	4	NOP	1	0	000000
ORTO	@Y	00598000	4	NOP	1	0	000000
XORTO	@Y	00698000	4	NOP	1	0	000000
ANDTO	@Y	00798000	4	NOP	1	0	000000
ADDTO	@Y	00C98000	4	NOP	1	0	000000
ADDCTO	@Y	00D98000	4	NOP	1	0	000000
SUBTO	@Y	00E98000	4	NOP	1	0	000000
SUBCTO	@Y	00F98000	4	NOP	1	0	000000

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDATO	@Y,*	00498000	4	T1	1	0	000FFF
ORTO	@Y,*	00598000	4	T1	1	0	000FFF
XORTO	@Y,*	00698000	4	T1	1	0	000FFF
ANDTO	@Y,*	00798000	4	T1	1	0	000FFF
ADDTO	@Y,*	00C98000	4	T1	1	0	000FFF
ADDCTO	@Y,*	00D98000	4	T1	1	0	000FFF
SUBTO	@Y,*	00E98000	4	T1	1	0	000FFF
SUBCTO	@Y,*	00F98000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDATO	@Z	004A8000	4	NOP	1	0	0
ORTO	@Z	005A8000	4	NOP	1	0	0
XORTO	@Z	006A8000	4	NOP	1	0	0
ANDTO	@Z	007A8000	4	NOP	1	0	0
ADDTO	@Z	00CA8000	4	NOP	1	0	0
ADDCTO	@Z	00DA8000	4	NOP	1	0	0
SUBTO	@Z	00EA8000	4	NOP	1	0	0
SUBCTO	@Z	00FA8000	4	NOP	1	0	0

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDATO	@Z,*	004A8000	4	T1	1	0	000FFF
ORTO	@Z,*	005A8000	4	T1	1	0	000FFF
XORTO	@Z,*	006A8000	4	T1	1	0	000FFF
ADDTO	@Z,*	00CA8000	4	T1	1	0	000FFF
ADDCTO	@Z,*	00DA8000	4	T1	1	0	000FFF
SUBTO	@Z,*	00EA8000	4	T1	1	0	000FFF
SUBCTO	@Z,*	00FA8000	4	T1	1	0	000FFF

/*INDIRECT 
/* oooo 1iix xxxx 0000 0000 0000
LDATO	@T	004B8000	4	NOP	1	0	000000
ORTO	@T	005B8000	4	NOP	1	0	000000
XORTO	@T	006B8000	4	NOP	1	0	000000
ANDTO	@T	007B8000	4	NOP	1	0	000000
ADDTO	@T	00CB8000	4	NOP	1	0	000000
ADDCTO	@T	00DB8000	4	NOP	1	0	000000
SUBTO	@T	00EB8000	4	NOP	1	0	000000
SUBCTO	@T	00FB8000	4	NOP	1	0	000000

/*INDIRECT WITH OFFSET
/* oooo 1iix xxxx nnnn nnnn nnnn 
LDATO	@T,*	004B8000	4	T1	1	0	000FFF
ORTO	@T,*	005B8000	4	T1	1	0	000FFF
XORTO	@T,*	006B8000	4	T1	1	0	000FFF
ANDTO	@T,*	007B8000	4	T1	1	0	000FFF
ADDTO	@T,*	00CB8000	4	T1	1	0	000FFF
ADDCTO	@T,*	00DB8000	4	T1	1	0	000FFF
SUBTO	@T,*	00EB8000	4	T1	1	0	000FFF
SUBCTO	@T,*	00FB8000	4	T1	1	0	000FFF


/*12 BIT OPERAND, MEMORY REF INST
/* oooo 0xxx xxxx nnnn nnnn nnnn DIRECT INSTRUCTIONS
LDATO	*	00408000	4	T1	1	0	000FFF	/*load acc from operand
ORTO	*	00508000	4	T1	1	0	000FFF
XORTO	*	00608000	4	T1	1	0	000FFF
ANDTO	*	00708000	4	T1	1	0	000FFF
ADDTO	*	00C08000	4	T1	1	0	000FFF
ADDCTO	*	00D08000	4	T1	1	0	000FFF
SUBTO	*	00E08000	4	T1	1	0	000FFF
SUBCTO	*	00F08000	4	T1	1	0	000FFF
